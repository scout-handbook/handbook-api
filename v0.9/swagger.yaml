openapi: 3.0.0
info:
  title: Handbook API
  description:
    See [GitLab](https://gitlab.com/skaut-handbook/handbook-api) or [OdyMateri√°ly](https://odymaterialy.skauting.cz/) for more.
  version: "0.9"
  contact:
    email: genabitu@gmail.com
  license:
    name: MIT License
    url: 'https://gitlab.com/skaut-handbook/handbook-api/blob/master/LICENSE.md'
servers:
  - url: https://odymaterialy.skauting.cz/API/v0.9
tags:
  - name: lesson
    description: Lessons, their fields and competences
  - name: deleted-lesson
    description: Restoring deleted lessons
  - name: competence
  - name: authentication
    description: Login & logout
  - name: account
    description: Login state and account details
  - name: image
  - name: field
  - name: user
    description: Other users and their roles
  - name: group
    description: User groups
  - name: event
    description: SkautIS events
  - name: mutex
    description: Locking of resources for exclusive edits
paths:
  /lesson:
    get:
      summary: Get a list of all lessons
      tags:
        - lesson
      parameters:
        - in: query
          name: override-group
          schema:
            type: string
          required: false
          description: If present and set to true and user role is editor, administrator or superuser, then all lessons will be returned. Otherwise, only lessons published in the groups the current user is in (or public lessons) will be returned.
      responses:
        '200':
          description: A list of all fields, their lessons and their competences
          content:
            'aplication/json':
              schema:
                type: object
                properties:
                  status: 
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                        name:
                          type: string
                          example: Field 1
                        lessons:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                                example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                              name:
                                type: string
                                example: Lesson 1
                              version:
                                type: integer
                                example: 1
                              competences:
                                type: array
                                items:
                                  type: string
                                  format: uuid
                                  example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                            required:
                              - id
                              - name
                              - version
                              - competences
                      required:
                        - lessons
                required:
                  - status
                  - response
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a lesson
      description: User role must be **editor** or higher!
      tags:
        - lesson
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'A new lesson'
                body:
                  type: string
                  format: markdown
                  example: 'Body of the new lesson'
              required:
                - name
      responses:
        '201':
          description: Added successfully
          content:
            'aplication/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: string
                    format: uuid
                    example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                    description: ID of the newly added lesson
                required:
                  - status
                  - response
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /lesson/{id}:
    get:
      summary: Get the body of a lesson
      description: '**Warning:** Lesson body is **not** XSS sanitized. You need to do your own sanitization - see [here](https://github.com/showdownjs/showdown/wiki/Markdown%27s-XSS-Vulnerability-(and-how-to-mitigate-it)) for more details on how to do that.'
      tags:
        - lesson
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      responses:
        '200':
          description: The body of the lesson
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                    example: 200
                  response:
                    type: string
                    format: markdown
                    example: 'The body of Lesson 1'
                required:
                  - status
                  - response
        '404':
          $ref: '#/components/responses/404'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update name and/or body of a lesson
      description: User role must be **editor** or higher! The lesson must be locked with a mutex prior to this operation, which releases such a mutex.
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: A changed lesson
                body:
                  type: string
                  format: markdown
                  example: New body of the lesson
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a lesson
      description: User role must be **administrator** or higher! The lesson must be locked with a mutex prior to this operation, which releases such a mutex.
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
  /lesson/{id}/competence:
    put:
      summary: Update the competences fulfilled by this lesson
      description: User role must be **editor** or higher!
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                competence:
                  type: array
                  items:
                    type: string
                    format: uuid
                    example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
              required:
                - competence
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /lesson/{id}/field:
    put:
      summary: Update the field the lesson is in
      description: User role must be **editor** or higher!
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                field:
                  type: string
                  format: uuid
                  example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
              required:
                - field
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /lesson/{id}/group:
    get:
      summary: List all groups the lesson is published in.
      description: Group "00000000-0000-0000-0000-000000000000" means the lesson will be publicly accessible.
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      responses:
        '200':
          description: A list of groups
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: string
                      format: uuid
                      example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Set which groups the lesson is published in.
      description: Group "00000000-0000-0000-0000-000000000000" means the lesson will be publicly accessible.
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                group:
                  type: array
                  items:
                    type: string
                    format: uuid
                    example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
              required:
                - group
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /lesson/{id}/history:
    get:
      summary: Get a list of all past versions of a lesson
      description: User role must be **editor** or higher!
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      responses:
        '200':
          description: A list of all versions of the lesson
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Lesson 1
                        version:
                          type: integer
                          example: 1
                      required:
                        - name
                        - version
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /lesson/{id}/history/{version}:
    get:
      summary: Get the body of a past version of a lesson
      description: 'User role must be **editor** or higher!<br>**Warning:** Lesson body is **not** XSS sanitized. You need to do your own sanitization - see [here](https://github.com/showdownjs/showdown/wiki/Markdown%27s-XSS-Vulnerability-(and-how-to-mitigate-it)) for more details on how to do that.'
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
        - in: path
          name: version
          schema:
            type: integer
            example: 1
          required: true
          description: The version to be returned
      responses:
        '200':
          description: The body of the lesson
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                    example: 200
                  response:
                    type: string
                    format: markdown
                    example: 'The body of Lesson 1'
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /lesson/{id}/pdf:
    get:
      summary: Get the lesson in PDF
      description: User role must be **editor** or higher!
      tags:
        - lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
        - in: query
          name: caption
          schema:
            type: string
            default: true
          required: false
          description: If present and not set to "true", then the lesson will be printed without the caption.
        - in: query
          name: qr
          schema:
            type: string
            default: true
          required: false
          description: If present and not set to "true", then the lesson will be printed without the QR code.
      responses:
        '200':
          description: The lesson as a PDF file
          content:
            'application/pdf':
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /deleted-lesson:
    get:
      summary: Get a list of all deleted lessons
      description: User role must be **administrator** or higher!
      tags:
        - deleted-lesson
      security:
        - apiKey: []
      responses:
        '200':
          description: A list of all deleted lessons, with their most recent names
          content:
            'aplication/json':
              schema:
                type: object
                properties:
                  status: 
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                        name:
                          type: string
                          example: Lesson 1
                      required:
                        - id
                        - name
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /deleted-lesson/{id}/history/:
    get:
      summary: Get a list of all past versions of a deleted lesson
      description: User role must be **administrator** or higher!
      tags:
        - deleted-lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
      responses:
        '200':
          description: A list of all versions of the lesson
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Lesson 1
                        version:
                          type: integer
                          example: 1
                      required:
                        - name
                        - version
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /deleted-lesson/{id}/history/{version}:
    get:
      summary: Get the body of a particular version of a deleted lesson
      description: 'User role must be **administrator** or higher!<br>**Warning:** Lesson body is **not** XSS sanitized. You need to do your own sanitization - see [here](https://github.com/showdownjs/showdown/wiki/Markdown%27s-XSS-Vulnerability-(and-how-to-mitigate-it)) for more details on how to do that.'
      tags:
        - deleted-lesson
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the lesson
        - in: path
          name: version
          schema:
            type: integer
            example: 1
          required: true
          description: The version to be returned
      responses:
        '200':
          description: The body of the lesson
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                    example: 200
                  response:
                    type: string
                    format: markdown
                    example: 'The body of Lesson 1'
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /competence:
    get:
      summary: Get a list of all competences
      tags:
        - competence
      responses:
        '200':
          description: A list of all competences
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                        number:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: A competence
                        description:
                          type: string
                          example: Competence description
                      required:
                        - id
                        - number
                        - name
                        - description
                required:
                  - status
                  - response
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a competence
      description: User role must be **administrator** or higher!
      tags:
        - competence
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                number:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: A competence
                description:
                  type: string
                  example: Competence description
              required:
                - number
                - name
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
  /competence/{id}:
    put:
      summary: Update a competence
      description: User role must be **administrator** or higher!
      tags:
        - competence
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the competence
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                number:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: A competence
                description:
                  type: string
                  example: Competence description
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a competence
      description: User role must be **administrator** or higher!
      tags:
        - competence
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the competence
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /login:
    get:
      summary: Login to the API
      description: This page redirects to login via [SkautIS](https://is.skaut.cz). After login, `POST /account` is called and the page redirects to a specified URL. If no URL is specified (by neither `return-uri` nor `referer`), the base URL is used.
      tags:
        - authentication
      parameters:
        - in: query
          name: return-uri
          schema:
            type: string
            format: uri
          required: false
          description: The URL the page is redirected to after login.
        - in: header
          name: referer
          schema:
            type: string
            format: uri
          required: false
          description: If (and only if) `return-uri` isn't present, the page is redirected to this URL after login.
      responses:
        '302':
          description: Redirect back to the desired page
          headers:
            set-cookie:
              description: Setting the auth cookies
              schema:
                type: string
                example: skautis_timeout=1234567890; skautis_token=1eb2adec-b262-491c-8f1b-0fc722dd7b2c; Path=/; Secure; HttpOnly
  /refresh:
    get:
      summary: Refresh the current session
      description: Normally, the login session expires after 30 minutes. Calling this endpoint within this timeframe resets the timeout.
      tags:
        - authentication
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
  /logout:
    get:
      summary: Logout of the API
      description: Delete all login information. A round-trip to [SkautIS](https://is.skaut.cz) may occur. After logout, the page redirects to a specified URL. If no URL is specified by `return-uri`, the base URL is used.
      tags:
        - authentication
      parameters:
        - in: query
          name: return-uri
          schema:
            type: string
            format: uri
          required: false
          description: The URL the page is redirected to after login.
      responses:
        '302':
          description: Redirect back to the desired page
  /account:
    get:
      summary: Get login state and account information
      tags:
        - account
      parameters:
        - in: query
          name: no-avatar
          schema:
            type: string
            default: false
          required: false
          description: If present and not set to "false", then the response won't contain the avatar field.
      responses:
        '200':
          description: Account information
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Alice"
                      role:
                        type: string
                        enum:
                          - user
                          - editor
                          - administrator
                          - superuser
                      groups:
                        type: array
                        items:
                          type: string
                          format: uuid
                          example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                      avatar:
                        type: string
                        format: byte
                    required:
                      - name
                      - role
                      - groups
                required:
                  - status
                  - response
        '401':
          description: No user logged in.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 401
                required:
                  - status
          headers:
            www-authenticate:
              description: Authentication method
              schema:
                type: string
                example: SkautIS
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add current user to registered users / update account details
      tags:
        - account
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /image:
    get:
      summary: Get a list of all images
      description: User role must be **editor** or higher!
      tags:
        - image
      security:
        - apiKey: []
      responses:
        '200':
          description: A list of all images
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: string
                      format: uuid
                      example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Upload an image
      description: User role must be **editor** or higher!
      tags:
        - image
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                image:
                  type: string
                  format: binary
                  example:
            encoding:
              image:
                contentType: image/jpeg, image/png
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
  /image/{id}:
    get:
      summary: Get an image
      description: Get an image in the desired quality. `original` returns the image as it was uploaded, `web` is ‚â§ 770√ó1440px, `thumbnail` is ‚â§ 256√ó256px. Both `web` and `thumbnail` return 60% quality JPEG.
      tags:
        - image
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
          required: true
          description: The id of the image
        - in: query
          name: quality
          schema:
            type: string
            enum:
              - original
              - web
              - thumbnail
            default: web
          required: false
          description: The desired quality. Must be one of `original`, `web` (default) or `thumbnail`.
        - in: header
          name: if-modified-since
          schema:
            type: string
            example: Mon, 07 Aug 2017 20:24:52 GMT
          required: false
          description: If provided, `304` will be returned if the image hasn't been changed since
      responses:
        '200':
          description: The desired image
          headers:
            last-modified:
              schema:
                type: string
                example: Mon, 07 Aug 2017 20:24:52 GMT
              description: Date of the last modification of the image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
                example:
            image/png:
              schema:
                type: string
                format: binary
                example:
        '304':
          description: Not modified since `if-modified-since`.
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Remove an image
      description: User role must be **administrator** or higher!
      tags:
        - image
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the image
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /field:
    post:
      summary: Add a field
      description: User role must be **administrator** or higher!
      tags:
        - field
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Field 1
              required:
                - name
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /field/{id}:
    put:
      summary: Update a field
      description: User role must be **administrator** or higher!
      tags:
        - field
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the field
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Field 1
              required:
                - name
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a field
      description: User role must be **administrator** or higher!
      tags:
        - field
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the field
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /user:
    get:
      summary: Get a list of users.
      description: User role must be **editor** or higher! The list will be different depending on the role of the logged in user. Superuser will see all users. Administrator will see users and editors. Editor will see only users. This command also supports paging with the `per-page` and `page` parameters.
      tags:
        - user
      security:
        - apiKey: []
      parameters:
        - in: query
          name: name
          schema:
            type: string
            example: Alice
          required: false
          description: If present, only users with names matching this (even partialy) will be returned.
        - in: query
          name: per-page
          schema:
            type: integer
            default: 25
          required: false
          description: How many entries should be returned per-page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: Which page (paged by `per-page` entries) should be returned
        - in: query
          name: role
          schema:
            type: string
            enum:
                - user
                - editor
                - administrator
                - superuser
          required: false
          description: If present, only users with such role will be returned
        - in: query
          name: group
          schema:
            type: string
            format: uuid
          required: false
          description: If present, only users in that group will be returned
      responses:
        '200':
          description: A list of users
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 3
                        description: Total number of entries
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 150000
                            name:
                              type: string
                              example: Alice
                            role:
                              type: string
                              enum:
                                - user
                                - editor
                                - administrator
                                - superuser
                            groups:
                              type: array
                              items:
                                type: string
                                format: uuid
                                example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                          required:
                            - id
                            - name
                            - role
                            - groups
                    required:
                      - count
                      - users
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add user to registered users/ update account details
      description: User role must be **editor** or higher!
      tags:
        - user
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 150000
                name:
                  type: string
                  example: Alice
              required:
                - id
                - name
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
  /user/{id}/role:
    put:
      summary: Update user's role
      description: User role must be **administrator** or higher! Superuser can change any user, administrator may change only between editor and user.
      tags:
        - user
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the user whose role is to be changed
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum:
                    - user
                    - editor
                    - administrator
                    - superuser
              required:
                - role
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
  /user/{id}/group:
    put:
      summary: Update user's group membership
      tags:
        - user
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the user whose role is to be changed
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                group:
                  type: array
                  items:
                    type: string
                    format: uuid
                    example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
              required:
                - group
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
  /group:
    get:
      summary: Get a list of all groups
      description: User role must be **editor** or higher!
      tags:
        - group
      security:
        - apiKey: []
      responses:
        '200':
          description: A list of groups
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 1eb2adec-b262-491c-8f1b-0fc722dd7b2c
                        name:
                          type: string
                          example: All users
                        count:
                          type: integer
                          example: 0
                          description: Number of users in this group
                      required:
                        - id
                        - name
                        - count
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a group
      description: User role must be **administrator** or higher!
      tags:
        - group
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: A group
              required:
                - name
      responses:
        '201':
          $ref: '#/components/responses/201'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /group/{id}:
    put:
      summary: Update a group
      description: User role must be **administrator** or higher!
      tags:
        - group
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the group
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: A group
              required:
                - name
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a group
      description: User role must be **administrator** or higher!
      tags:
        - group
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the group
      responses:
        '200':
          $ref: '#/components/responses/200'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /event:
    get:
      summary: Get a list of all user events
      description: User role must be **editor** or higher!
      tags:
        - event
      security:
        - apiKey: []
      responses:
        '200':
          description: A list of events
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 123
                        name:
                          type: string
                          example: ƒåLK Test
                      required:
                        - id
                        - name
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /event/{id}/participant:
    get:
      summary: Get a list of event participants.
      description: User role must be **editor** or higher!
      tags:
        - event
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the event
      responses:
        '200':
          description: A list of participants
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 150000
                        name:
                          type: string
                          example: Alice
                      required:
                        - id
                        - name
                required:
                  - status
                  - response
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
  /mutex/{id}:
    post:
      summary: Acquire a mutex
      description: User role must be **editor** or higher! The mutex is acquired until SkautIS timeout or for 30 minutes. This operation may fail with response code **409** if somebody else has a valid (not timed-out) mutex for the same resource.
      tags:
        - mutex
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the resource
        - in: cookie
          name: skautis_timeout
          schema:
            type: integer
            example: 1234567890
          required: false
          description: SkautIS login session timeout
      responses:
        '201':
          description: Lock succesfully acquired.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 201
                required:
                  - status
        '403':
          $ref: '#/components/responses/403'
        '409':
          description: Locked by someone else
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 409
                  type:
                    type: string
                    enum:
                      - LockedException
                  message:
                    type: string
                    example: An error message.
                  holder:
                    type: string
                    example: Alice
                required:
                  - status
                  - type
                  - message
                  - holder
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Extend a mutex
      description: User role must be **editor** or higher! Extend a mutex until SkautIS timeout or for 30 minutes. This operation may fail with response code **404** if the mutex has timed-out **and** somebody else has acquired it since.
      tags:
        - mutex
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the resource
        - in: cookie
          name: skautis_timeout
          schema:
            type: integer
            example: 1234567890
          required: false
          description: SkautIS login session timeout
      responses:
        '200':
          description: Lock succesfully extended.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                required:
                  - status
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Release a mutex
      description: User role must be **editor** or higher! This operation may fail with response code **404** if the mutex has timed-out **and** somebody else has acquired it since.
      tags:
        - mutex
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the resource
      responses:
        '200':
          description: Lock succesfully released.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 200
                required:
                  - status
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /mutex-beacon/{id}:
    post:
      summary: Release a mutex
      description: User role must be **editor** or higher! This endpoind is intended to be used as a target for [Beacon API](https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API). This operation will fail silently if anything goes wrong.
      tags:
        - mutex
      security:
        - apiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the resource
      responses:
        '200':
          description: Unknown result.
components:
  responses:
    200:
      description: Operation successful
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 200
            required:
              - status
    201:
      description: Added successfully
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 201
            required:
              - status
    400:
      description: A required argument is missing
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 400
              type:
                type: string
                enum:
                  - MissingArgumentException
              message:
                type: string
                example: An error message.
            required:
              - status
              - type
              - message
    403:
      description: Authentication failed. This may be caused by login timeout or insufficient role.
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 403
              type:
                type: string
                enum:
                  - AuthenticationException
                  - RoleException
              message:
                type: string
                example: An error message.
            required:
              - status
              - type
              - message
    404:
      description: Resource not found
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 404
              type:
                type: string
                enum:
                  - NotFoundException
              message:
                type: string
                example: An error message.
            required:
              - status
              - type
              - message
    412:
      description: Resource not locked by a mutex
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 412
              type:
                type: string
                enum:
                  - NotLockedException
              message:
                type: string
                example: An error message.
            required:
              - status
              - type
              - message
    415:
      description: An argument with wrong type has been passed
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 415
              type:
                type: string
                enum:
                  - InvalidArgumentTypeException
              message:
                type: string
                example: An error message.
            required:
              - status
              - type
              - message
    500:
      description: Internal server error
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                enum:
                  - 500
              type:
                type: string
                enum:
                  - ConnectionException
                  - Exception
                  - ExecutionException
                  - QueryException
              message:
                type: string
                example: An error message.
            required:
              - status
              - type
              - message
  securitySchemes:
    apiKey:
      type: apiKey
      in: cookie
      name: skautis_token
